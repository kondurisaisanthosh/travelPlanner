import { InjectionToken, Injectable, Inject, NgModule } from '@angular/core';
import { bindCallback, of, from, Observable, EMPTY } from 'rxjs';
import { mergeMap, map } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const CONFIG = new InjectionToken('providers configuration');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
class OauthProvider {
    /**
     * @param {?} provider
     * @param {?} src
     * @param {?} onload
     * @param {?=} async
     */
    constructor(provider, src, onload, async = true) {
        this.ID_PREFIX = 'social-login__';
        /** @type {?} */
        const id = this.ID_PREFIX + provider;
        if (document.getElementById(id)) {
            return;
        }
        /** @type {?} */
        const script = document.createElement('script');
        script.id = id;
        script.async = async;
        script.src = src;
        script.onload = onload;
        script.defer = true;
        document.head.appendChild(script);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    OauthProvider.prototype.ID_PREFIX;
    /**
     * @abstract
     * @return {?}
     */
    OauthProvider.prototype.login = function () { };
    /**
     * @abstract
     * @return {?}
     */
    OauthProvider.prototype.logout = function () { };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const Provider = {
    FACEBOOK: 'facebook',
    GOOGLE: 'google',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FacebookProvider extends OauthProvider {
    /**
     * @param {?} _config
     */
    constructor(_config) {
        super(Provider.FACEBOOK, '//connect.facebook.net/en_US/sdk.js', (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const initConfig = this._config.initOptions;
            /** @type {?} */
            const config = initConfig.version ? initConfig : Object.assign({}, initConfig, { version: 'v2.9' });
            FB.init(config);
        }));
        this._config = _config;
    }
    /**
     * @return {?}
     */
    login() {
        return bindCallback((/**
         * @param {?} cb
         * @return {?}
         */
        (cb) => FB.login(cb, this._config.loginOptions)))().pipe(mergeMap((/**
         * @param {?} loginResponse
         * @return {?}
         */
        (loginResponse) => bindCallback((/**
         * @param {?} cb
         * @return {?}
         */
        (cb) => FB.api('/me?fields=name,email,picture,first_name,last_name', cb)))().pipe(map((/**
         * @param {?} meResponse
         * @return {?}
         */
        (meResponse) => ((/** @type {?} */ ({
            id: meResponse.id,
            name: meResponse.name,
            email: meResponse.email,
            profileImg: `https://graph.facebook.com/${meResponse.id}/picture?type=normal`,
            firstName: meResponse.first_name,
            lastName: meResponse.last_name,
            idToken: loginResponse.authResponse.signedRequest,
            accessToken: loginResponse.authResponse.accessToken
        })))))))));
    }
    /**
     * @return {?}
     */
    logout() {
        FB.logout();
        return of(true);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    FacebookProvider.prototype._config;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GoogleProvider extends OauthProvider {
    /**
     * @param {?} config
     */
    constructor(config) {
        super(Provider.GOOGLE, '//apis.google.com/js/platform.js', (/**
         * @return {?}
         */
        () => {
            gapi.load('auth2', (/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const conf = !config.scope ? Object.assign({}, config, { scope: 'email' }) : config;
                gapi.auth2.init(conf).then((/**
                 * @param {?} auth
                 * @return {?}
                 */
                auth => (this._googleAuth = auth)));
            }));
        }));
    }
    /**
     * @return {?}
     */
    login() {
        return from(this._googleAuth.signIn({ prompt: 'select_account' })).pipe(map((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const profile = this._googleAuth.currentUser.get().getBasicProfile();
            /** @type {?} */
            const accessToken = this._googleAuth.currentUser.get().getAuthResponse(true).access_token;
            /** @type {?} */
            const idToken = this._googleAuth.currentUser.get().getAuthResponse(true).id_token;
            return {
                id: profile.getId(),
                email: profile.getEmail(),
                name: profile.getName(),
                profileImg: profile.getImageUrl(),
                accessToken: accessToken,
                idToken: idToken
            };
        })));
    }
    /**
     * @return {?}
     */
    logout() {
        return Observable.create((/**
         * @param {?} observer
         * @return {?}
         */
        observer => observer.complete(this._googleAuth.signOut())));
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    GoogleProvider.prototype._googleAuth;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SocialLoginService {
    /**
     * @param {?} config
     */
    constructor(config) {
        this._providers = {};
        this._providers = Object.keys(config).reduce((/**
         * @param {?} obj
         * @param {?} providerId
         * @return {?}
         */
        (obj, providerId) => {
            /** @type {?} */
            const provider = Provider[providerId.toUpperCase()];
            obj[provider] = this.oauthProviderFactory(provider, config[providerId]);
            return obj;
        }), {});
    }
    /**
     * @param {?} provider
     * @return {?}
     */
    login(provider) {
        this._providerInUse = provider;
        /** @type {?} */
        const oauthProvider = this._providers[provider];
        return oauthProvider ? oauthProvider.login() : EMPTY;
    }
    /**
     * @return {?}
     */
    logout() {
        /** @type {?} */
        const oauthProvider = this._providers[this._providerInUse];
        /** @type {?} */
        const ret = oauthProvider ? oauthProvider.logout() : EMPTY;
        this._providerInUse = undefined;
        return ret;
    }
    /**
     * @return {?}
     */
    loggedIn() {
        return this._providerInUse ? true : false;
    }
    /**
     * @private
     * @param {?} provider
     * @param {?} config
     * @return {?}
     */
    oauthProviderFactory(provider, config) {
        switch (provider) {
            case Provider.FACEBOOK:
                return new FacebookProvider((/** @type {?} */ (config)));
            case Provider.GOOGLE:
                return new GoogleProvider((/** @type {?} */ (config)));
        }
    }
}
SocialLoginService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SocialLoginService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [CONFIG,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    SocialLoginService.prototype._providers;
    /**
     * @type {?}
     * @private
     */
    SocialLoginService.prototype._providerInUse;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxSocialLoginModule {
    /**
     * @param {?} config
     * @return {?}
     */
    static init(config) {
        return {
            ngModule: NgxSocialLoginModule,
            providers: [
                { provide: CONFIG, useValue: config }
            ]
        };
    }
}
NgxSocialLoginModule.decorators = [
    { type: NgModule, args: [{
                providers: [SocialLoginService]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function SocialUser() { }
if (false) {
    /** @type {?} */
    SocialUser.prototype.id;
    /** @type {?} */
    SocialUser.prototype.email;
    /** @type {?} */
    SocialUser.prototype.name;
    /** @type {?} */
    SocialUser.prototype.profileImg;
    /** @type {?|undefined} */
    SocialUser.prototype.firstName;
    /** @type {?|undefined} */
    SocialUser.prototype.lastName;
    /** @type {?} */
    SocialUser.prototype.accessToken;
    /** @type {?} */
    SocialUser.prototype.idToken;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function FacebookProviderConfig() { }
if (false) {
    /** @type {?} */
    FacebookProviderConfig.prototype.initOptions;
    /** @type {?|undefined} */
    FacebookProviderConfig.prototype.loginOptions;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function GoogleProviderConfig() { }
if (false) {
    /** @type {?} */
    GoogleProviderConfig.prototype.client_id;
    /** @type {?|undefined} */
    GoogleProviderConfig.prototype.cookie_policy;
    /** @type {?|undefined} */
    GoogleProviderConfig.prototype.scope;
    /** @type {?|undefined} */
    GoogleProviderConfig.prototype.fetch_basic_profile;
    /** @type {?|undefined} */
    GoogleProviderConfig.prototype.hosted_domain;
    /** @type {?|undefined} */
    GoogleProviderConfig.prototype.openid_realm;
    /** @type {?|undefined} */
    GoogleProviderConfig.prototype.ux_mode;
    /** @type {?|undefined} */
    GoogleProviderConfig.prototype.redirect_uri;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function ProviderConfig() { }
if (false) {
    /** @type {?|undefined} */
    ProviderConfig.prototype.google;
    /** @type {?|undefined} */
    ProviderConfig.prototype.facebook;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgxSocialLoginModule, Provider, SocialLoginService, CONFIG as ɵa };
//# sourceMappingURL=ng8-social-login.js.map
