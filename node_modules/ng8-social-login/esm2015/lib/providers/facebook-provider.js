/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { OauthProvider } from './oauth-provider';
import { bindCallback, of } from 'rxjs';
import { map, mergeMap } from 'rxjs/operators';
import { Provider } from '../models/provider';
export class FacebookProvider extends OauthProvider {
    /**
     * @param {?} _config
     */
    constructor(_config) {
        super(Provider.FACEBOOK, '//connect.facebook.net/en_US/sdk.js', (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const initConfig = this._config.initOptions;
            /** @type {?} */
            const config = initConfig.version ? initConfig : Object.assign({}, initConfig, { version: 'v2.9' });
            FB.init(config);
        }));
        this._config = _config;
    }
    /**
     * @return {?}
     */
    login() {
        return bindCallback((/**
         * @param {?} cb
         * @return {?}
         */
        (cb) => FB.login(cb, this._config.loginOptions)))().pipe(mergeMap((/**
         * @param {?} loginResponse
         * @return {?}
         */
        (loginResponse) => bindCallback((/**
         * @param {?} cb
         * @return {?}
         */
        (cb) => FB.api('/me?fields=name,email,picture,first_name,last_name', cb)))().pipe(map((/**
         * @param {?} meResponse
         * @return {?}
         */
        (meResponse) => ((/** @type {?} */ ({
            id: meResponse.id,
            name: meResponse.name,
            email: meResponse.email,
            profileImg: `https://graph.facebook.com/${meResponse.id}/picture?type=normal`,
            firstName: meResponse.first_name,
            lastName: meResponse.last_name,
            idToken: loginResponse.authResponse.signedRequest,
            accessToken: loginResponse.authResponse.accessToken
        })))))))));
    }
    /**
     * @return {?}
     */
    logout() {
        FB.logout();
        return of(true);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    FacebookProvider.prototype._config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjZWJvb2stcHJvdmlkZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZzgtc29jaWFsLWxvZ2luLyIsInNvdXJjZXMiOlsibGliL3Byb3ZpZGVycy9mYWNlYm9vay1wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxZQUFZLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHL0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBSTlDLE1BQU0sT0FBTyxnQkFBaUIsU0FBUSxhQUFhOzs7O0lBQy9DLFlBQW9CLE9BQStCO1FBQy9DLEtBQUssQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLHFDQUFxQzs7O1FBQUUsR0FBRyxFQUFFOztrQkFDM0QsVUFBVSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVzs7a0JBQ3JDLE1BQU0sR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxtQkFBTSxVQUFVLEVBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLENBQUU7WUFDMUYsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwQixDQUFDLEVBQUMsQ0FBQztRQUxhLFlBQU8sR0FBUCxPQUFPLENBQXdCO0lBTW5ELENBQUM7Ozs7SUFFRCxLQUFLO1FBQ0QsT0FBTyxZQUFZOzs7O1FBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEVBQUMsRUFBRSxDQUFDLElBQUksQ0FDdkUsUUFBUTs7OztRQUFDLENBQUMsYUFBa0IsRUFBRSxFQUFFLENBQzVCLFlBQVk7Ozs7UUFBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxvREFBb0QsRUFBRSxFQUFFLENBQUMsRUFBQyxFQUFFLENBQUMsSUFBSSxDQUN6RixHQUFHOzs7O1FBQUMsQ0FBQyxVQUFlLEVBQUUsRUFBRSxDQUFDLENBQUMsbUJBQUE7WUFDbEIsRUFBRSxFQUFFLFVBQVUsQ0FBQyxFQUFFO1lBQ2pCLElBQUksRUFBRSxVQUFVLENBQUMsSUFBSTtZQUNyQixLQUFLLEVBQUUsVUFBVSxDQUFDLEtBQUs7WUFDdkIsVUFBVSxFQUFFLDhCQUE4QixVQUFVLENBQUMsRUFBRSxzQkFBc0I7WUFDN0UsU0FBUyxFQUFFLFVBQVUsQ0FBQyxVQUFVO1lBQ2hDLFFBQVEsRUFBRSxVQUFVLENBQUMsU0FBUztZQUM5QixPQUFPLEVBQUUsYUFBYSxDQUFDLFlBQVksQ0FBQyxhQUFhO1lBQ2pELFdBQVcsRUFBRSxhQUFhLENBQUMsWUFBWSxDQUFDLFdBQVc7U0FDdEQsRUFBYyxDQUFDLEVBQ25CLENBQUMsRUFDVCxDQUFDLENBQUM7SUFDWCxDQUFDOzs7O0lBRUQsTUFBTTtRQUNGLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNaLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3BCLENBQUM7Q0FDSjs7Ozs7O0lBOUJlLG1DQUF1QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9hdXRoUHJvdmlkZXIgfSBmcm9tICcuL29hdXRoLXByb3ZpZGVyJztcbmltcG9ydCB7IGJpbmRDYWxsYmFjaywgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCwgbWVyZ2VNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBGYWNlYm9va1Byb3ZpZGVyQ29uZmlnIH0gZnJvbSAnLi4vbW9kZWxzL2NvbmZpZy9mYWNlYm9vay1wcm92aWRlci1jb25maWcnO1xuaW1wb3J0IHsgU29jaWFsVXNlciB9IGZyb20gJy4uL21vZGVscy9zb2NpYWwtdXNlcic7XG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJy4uL21vZGVscy9wcm92aWRlcic7XG5cbmRlY2xhcmUgY29uc3QgRkI6IGFueTtcblxuZXhwb3J0IGNsYXNzIEZhY2Vib29rUHJvdmlkZXIgZXh0ZW5kcyBPYXV0aFByb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9jb25maWc6IEZhY2Vib29rUHJvdmlkZXJDb25maWcpIHtcbiAgICAgICAgc3VwZXIoUHJvdmlkZXIuRkFDRUJPT0ssICcvL2Nvbm5lY3QuZmFjZWJvb2submV0L2VuX1VTL3Nkay5qcycsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGluaXRDb25maWcgPSB0aGlzLl9jb25maWcuaW5pdE9wdGlvbnM7XG4gICAgICAgICAgICBjb25zdCBjb25maWcgPSBpbml0Q29uZmlnLnZlcnNpb24gPyBpbml0Q29uZmlnIDogeyAuLi5pbml0Q29uZmlnLCAuLi57IHZlcnNpb246ICd2Mi45JyB9IH07XG4gICAgICAgICAgICBGQi5pbml0KGNvbmZpZyk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGxvZ2luKCk6IE9ic2VydmFibGU8U29jaWFsVXNlcj4ge1xuICAgICAgICByZXR1cm4gYmluZENhbGxiYWNrKChjYikgPT4gRkIubG9naW4oY2IsIHRoaXMuX2NvbmZpZy5sb2dpbk9wdGlvbnMpKSgpLnBpcGUoXG4gICAgICAgICAgICBtZXJnZU1hcCgobG9naW5SZXNwb25zZTogYW55KSA9PlxuICAgICAgICAgICAgICAgIGJpbmRDYWxsYmFjaygoY2IpID0+IEZCLmFwaSgnL21lP2ZpZWxkcz1uYW1lLGVtYWlsLHBpY3R1cmUsZmlyc3RfbmFtZSxsYXN0X25hbWUnLCBjYikpKCkucGlwZShcbiAgICAgICAgICAgICAgICAgICAgbWFwKChtZVJlc3BvbnNlOiBhbnkpID0+ICh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IG1lUmVzcG9uc2UuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogbWVSZXNwb25zZS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsOiBtZVJlc3BvbnNlLmVtYWlsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2ZpbGVJbWc6IGBodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS8ke21lUmVzcG9uc2UuaWR9L3BpY3R1cmU/dHlwZT1ub3JtYWxgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0TmFtZTogbWVSZXNwb25zZS5maXJzdF9uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3ROYW1lOiBtZVJlc3BvbnNlLmxhc3RfbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZFRva2VuOiBsb2dpblJlc3BvbnNlLmF1dGhSZXNwb25zZS5zaWduZWRSZXF1ZXN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc1Rva2VuOiBsb2dpblJlc3BvbnNlLmF1dGhSZXNwb25zZS5hY2Nlc3NUb2tlblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBhcyBTb2NpYWxVc2VyKVxuICAgICAgICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgKSk7XG4gICAgfVxuXG4gICAgbG9nb3V0KCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIEZCLmxvZ291dCgpO1xuICAgICAgICByZXR1cm4gb2YodHJ1ZSk7XG4gICAgfVxufVxuIl19