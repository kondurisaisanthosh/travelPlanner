import { InjectionToken, Injectable, Inject, NgModule } from '@angular/core';
import { bindCallback, of, from, Observable, EMPTY } from 'rxjs';
import { __extends, __assign } from 'tslib';
import { mergeMap, map } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var CONFIG = new InjectionToken('providers configuration');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
var /**
 * @abstract
 */
OauthProvider = /** @class */ (function () {
    function OauthProvider(provider, src, onload, async) {
        if (async === void 0) { async = true; }
        this.ID_PREFIX = 'social-login__';
        /** @type {?} */
        var id = this.ID_PREFIX + provider;
        if (document.getElementById(id)) {
            return;
        }
        /** @type {?} */
        var script = document.createElement('script');
        script.id = id;
        script.async = async;
        script.src = src;
        script.onload = onload;
        script.defer = true;
        document.head.appendChild(script);
    }
    return OauthProvider;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    OauthProvider.prototype.ID_PREFIX;
    /**
     * @abstract
     * @return {?}
     */
    OauthProvider.prototype.login = function () { };
    /**
     * @abstract
     * @return {?}
     */
    OauthProvider.prototype.logout = function () { };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var Provider = {
    FACEBOOK: 'facebook',
    GOOGLE: 'google',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FacebookProvider = /** @class */ (function (_super) {
    __extends(FacebookProvider, _super);
    function FacebookProvider(_config) {
        var _this = _super.call(this, Provider.FACEBOOK, '//connect.facebook.net/en_US/sdk.js', (/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var initConfig = _this._config.initOptions;
            /** @type {?} */
            var config = initConfig.version ? initConfig : __assign({}, initConfig, { version: 'v2.9' });
            FB.init(config);
        })) || this;
        _this._config = _config;
        return _this;
    }
    /**
     * @return {?}
     */
    FacebookProvider.prototype.login = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return bindCallback((/**
         * @param {?} cb
         * @return {?}
         */
        function (cb) { return FB.login(cb, _this._config.loginOptions); }))().pipe(mergeMap((/**
         * @param {?} loginResponse
         * @return {?}
         */
        function (loginResponse) {
            return bindCallback((/**
             * @param {?} cb
             * @return {?}
             */
            function (cb) { return FB.api('/me?fields=name,email,picture,first_name,last_name', cb); }))().pipe(map((/**
             * @param {?} meResponse
             * @return {?}
             */
            function (meResponse) { return ((/** @type {?} */ ({
                id: meResponse.id,
                name: meResponse.name,
                email: meResponse.email,
                profileImg: "https://graph.facebook.com/" + meResponse.id + "/picture?type=normal",
                firstName: meResponse.first_name,
                lastName: meResponse.last_name,
                idToken: loginResponse.authResponse.signedRequest,
                accessToken: loginResponse.authResponse.accessToken
            }))); })));
        })));
    };
    /**
     * @return {?}
     */
    FacebookProvider.prototype.logout = /**
     * @return {?}
     */
    function () {
        FB.logout();
        return of(true);
    };
    return FacebookProvider;
}(OauthProvider));
if (false) {
    /**
     * @type {?}
     * @private
     */
    FacebookProvider.prototype._config;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var GoogleProvider = /** @class */ (function (_super) {
    __extends(GoogleProvider, _super);
    function GoogleProvider(config) {
        var _this = _super.call(this, Provider.GOOGLE, '//apis.google.com/js/platform.js', (/**
         * @return {?}
         */
        function () {
            gapi.load('auth2', (/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var conf = !config.scope ? __assign({}, config, { scope: 'email' }) : config;
                gapi.auth2.init(conf).then((/**
                 * @param {?} auth
                 * @return {?}
                 */
                function (auth) { return (_this._googleAuth = auth); }));
            }));
        })) || this;
        return _this;
    }
    /**
     * @return {?}
     */
    GoogleProvider.prototype.login = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return from(this._googleAuth.signIn({ prompt: 'select_account' })).pipe(map((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var profile = _this._googleAuth.currentUser.get().getBasicProfile();
            /** @type {?} */
            var accessToken = _this._googleAuth.currentUser.get().getAuthResponse(true).access_token;
            /** @type {?} */
            var idToken = _this._googleAuth.currentUser.get().getAuthResponse(true).id_token;
            return {
                id: profile.getId(),
                email: profile.getEmail(),
                name: profile.getName(),
                profileImg: profile.getImageUrl(),
                accessToken: accessToken,
                idToken: idToken
            };
        })));
    };
    /**
     * @return {?}
     */
    GoogleProvider.prototype.logout = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return Observable.create((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) { return observer.complete(_this._googleAuth.signOut()); }));
    };
    return GoogleProvider;
}(OauthProvider));
if (false) {
    /**
     * @type {?}
     * @private
     */
    GoogleProvider.prototype._googleAuth;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SocialLoginService = /** @class */ (function () {
    function SocialLoginService(config) {
        var _this = this;
        this._providers = {};
        this._providers = Object.keys(config).reduce((/**
         * @param {?} obj
         * @param {?} providerId
         * @return {?}
         */
        function (obj, providerId) {
            /** @type {?} */
            var provider = Provider[providerId.toUpperCase()];
            obj[provider] = _this.oauthProviderFactory(provider, config[providerId]);
            return obj;
        }), {});
    }
    /**
     * @param {?} provider
     * @return {?}
     */
    SocialLoginService.prototype.login = /**
     * @param {?} provider
     * @return {?}
     */
    function (provider) {
        this._providerInUse = provider;
        /** @type {?} */
        var oauthProvider = this._providers[provider];
        return oauthProvider ? oauthProvider.login() : EMPTY;
    };
    /**
     * @return {?}
     */
    SocialLoginService.prototype.logout = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var oauthProvider = this._providers[this._providerInUse];
        /** @type {?} */
        var ret = oauthProvider ? oauthProvider.logout() : EMPTY;
        this._providerInUse = undefined;
        return ret;
    };
    /**
     * @return {?}
     */
    SocialLoginService.prototype.loggedIn = /**
     * @return {?}
     */
    function () {
        return this._providerInUse ? true : false;
    };
    /**
     * @private
     * @param {?} provider
     * @param {?} config
     * @return {?}
     */
    SocialLoginService.prototype.oauthProviderFactory = /**
     * @private
     * @param {?} provider
     * @param {?} config
     * @return {?}
     */
    function (provider, config) {
        switch (provider) {
            case Provider.FACEBOOK:
                return new FacebookProvider((/** @type {?} */ (config)));
            case Provider.GOOGLE:
                return new GoogleProvider((/** @type {?} */ (config)));
        }
    };
    SocialLoginService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SocialLoginService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [CONFIG,] }] }
    ]; };
    return SocialLoginService;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    SocialLoginService.prototype._providers;
    /**
     * @type {?}
     * @private
     */
    SocialLoginService.prototype._providerInUse;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxSocialLoginModule = /** @class */ (function () {
    function NgxSocialLoginModule() {
    }
    /**
     * @param {?} config
     * @return {?}
     */
    NgxSocialLoginModule.init = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        return {
            ngModule: NgxSocialLoginModule,
            providers: [
                { provide: CONFIG, useValue: config }
            ]
        };
    };
    NgxSocialLoginModule.decorators = [
        { type: NgModule, args: [{
                    providers: [SocialLoginService]
                },] }
    ];
    return NgxSocialLoginModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function SocialUser() { }
if (false) {
    /** @type {?} */
    SocialUser.prototype.id;
    /** @type {?} */
    SocialUser.prototype.email;
    /** @type {?} */
    SocialUser.prototype.name;
    /** @type {?} */
    SocialUser.prototype.profileImg;
    /** @type {?|undefined} */
    SocialUser.prototype.firstName;
    /** @type {?|undefined} */
    SocialUser.prototype.lastName;
    /** @type {?} */
    SocialUser.prototype.accessToken;
    /** @type {?} */
    SocialUser.prototype.idToken;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function FacebookProviderConfig() { }
if (false) {
    /** @type {?} */
    FacebookProviderConfig.prototype.initOptions;
    /** @type {?|undefined} */
    FacebookProviderConfig.prototype.loginOptions;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function GoogleProviderConfig() { }
if (false) {
    /** @type {?} */
    GoogleProviderConfig.prototype.client_id;
    /** @type {?|undefined} */
    GoogleProviderConfig.prototype.cookie_policy;
    /** @type {?|undefined} */
    GoogleProviderConfig.prototype.scope;
    /** @type {?|undefined} */
    GoogleProviderConfig.prototype.fetch_basic_profile;
    /** @type {?|undefined} */
    GoogleProviderConfig.prototype.hosted_domain;
    /** @type {?|undefined} */
    GoogleProviderConfig.prototype.openid_realm;
    /** @type {?|undefined} */
    GoogleProviderConfig.prototype.ux_mode;
    /** @type {?|undefined} */
    GoogleProviderConfig.prototype.redirect_uri;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function ProviderConfig() { }
if (false) {
    /** @type {?|undefined} */
    ProviderConfig.prototype.google;
    /** @type {?|undefined} */
    ProviderConfig.prototype.facebook;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgxSocialLoginModule, Provider, SocialLoginService, CONFIG as ɵa };
//# sourceMappingURL=ng8-social-login.js.map
