/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { EMPTY } from 'rxjs';
import { CONFIG } from '../models/config-injection-token';
import { FacebookProvider } from '../providers/facebook-provider';
import { GoogleProvider } from '../providers/google-provider';
import { Provider } from '../models/provider';
export class SocialLoginService {
    /**
     * @param {?} config
     */
    constructor(config) {
        this._providers = {};
        this._providers = Object.keys(config).reduce((/**
         * @param {?} obj
         * @param {?} providerId
         * @return {?}
         */
        (obj, providerId) => {
            /** @type {?} */
            const provider = Provider[providerId.toUpperCase()];
            obj[provider] = this.oauthProviderFactory(provider, config[providerId]);
            return obj;
        }), {});
    }
    /**
     * @param {?} provider
     * @return {?}
     */
    login(provider) {
        this._providerInUse = provider;
        /** @type {?} */
        const oauthProvider = this._providers[provider];
        return oauthProvider ? oauthProvider.login() : EMPTY;
    }
    /**
     * @return {?}
     */
    logout() {
        /** @type {?} */
        const oauthProvider = this._providers[this._providerInUse];
        /** @type {?} */
        const ret = oauthProvider ? oauthProvider.logout() : EMPTY;
        this._providerInUse = undefined;
        return ret;
    }
    /**
     * @return {?}
     */
    loggedIn() {
        return this._providerInUse ? true : false;
    }
    /**
     * @private
     * @param {?} provider
     * @param {?} config
     * @return {?}
     */
    oauthProviderFactory(provider, config) {
        switch (provider) {
            case Provider.FACEBOOK:
                return new FacebookProvider((/** @type {?} */ (config)));
            case Provider.GOOGLE:
                return new GoogleProvider((/** @type {?} */ (config)));
        }
    }
}
SocialLoginService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SocialLoginService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [CONFIG,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    SocialLoginService.prototype._providers;
    /**
     * @type {?}
     * @private
     */
    SocialLoginService.prototype._providerInUse;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29jaWFsLWxvZ2luLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZzgtc29jaWFsLWxvZ2luLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3NvY2lhbC1sb2dpbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVuRCxPQUFPLEVBQWMsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRXpDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUMxRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUdsRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDOUQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBSTlDLE1BQU0sT0FBTyxrQkFBa0I7Ozs7SUFLM0IsWUFBNEIsTUFBc0I7UUFKakMsZUFBVSxHQUE0QyxFQUFFLENBQUM7UUFLdEUsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU07Ozs7O1FBQUMsQ0FBQyxHQUFHLEVBQUUsVUFBVSxFQUFFLEVBQUU7O2tCQUN2RCxRQUFRLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNuRCxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztZQUN4RSxPQUFPLEdBQUcsQ0FBQztRQUNmLENBQUMsR0FBRSxFQUFFLENBQUMsQ0FBQztJQUNYLENBQUM7Ozs7O0lBRUQsS0FBSyxDQUFDLFFBQWtCO1FBQ3BCLElBQUksQ0FBQyxjQUFjLEdBQUcsUUFBUSxDQUFDOztjQUN6QixhQUFhLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUM7UUFDL0MsT0FBTyxhQUFhLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQ3pELENBQUM7Ozs7SUFFRCxNQUFNOztjQUNJLGFBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUM7O2NBQ3BELEdBQUcsR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSztRQUMxRCxJQUFJLENBQUMsY0FBYyxHQUFHLFNBQVMsQ0FBQztRQUNoQyxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7Ozs7SUFFRCxRQUFRO1FBQ0osT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUM5QyxDQUFDOzs7Ozs7O0lBRU8sb0JBQW9CLENBQ3hCLFFBQWtCLEVBQ2xCLE1BQXFEO1FBRXJELFFBQVEsUUFBUSxFQUFFO1lBQ2QsS0FBSyxRQUFRLENBQUMsUUFBUTtnQkFDbEIsT0FBTyxJQUFJLGdCQUFnQixDQUFDLG1CQUFBLE1BQU0sRUFBMEIsQ0FBQyxDQUFDO1lBQ2xFLEtBQUssUUFBUSxDQUFDLE1BQU07Z0JBQ2hCLE9BQU8sSUFBSSxjQUFjLENBQUMsbUJBQUEsTUFBTSxFQUF3QixDQUFDLENBQUM7U0FDakU7SUFDTCxDQUFDOzs7WUF6Q0osVUFBVTs7Ozs0Q0FNTSxNQUFNLFNBQUMsTUFBTTs7Ozs7OztJQUoxQix3Q0FBMEU7Ozs7O0lBRTFFLDRDQUFpQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2F1dGhQcm92aWRlciB9IGZyb20gJy4uL3Byb3ZpZGVycy9vYXV0aC1wcm92aWRlcic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBFTVBUWSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgUHJvdmlkZXJDb25maWcgfSBmcm9tICcuLi9tb2RlbHMvY29uZmlnL3Byb3ZpZGVyLWNvbmZpZyc7XG5pbXBvcnQgeyBDT05GSUcgfSBmcm9tICcuLi9tb2RlbHMvY29uZmlnLWluamVjdGlvbi10b2tlbic7XG5pbXBvcnQgeyBGYWNlYm9va1Byb3ZpZGVyIH0gZnJvbSAnLi4vcHJvdmlkZXJzL2ZhY2Vib29rLXByb3ZpZGVyJztcbmltcG9ydCB7IEZhY2Vib29rUHJvdmlkZXJDb25maWcgfSBmcm9tICcuLi9tb2RlbHMvY29uZmlnL2ZhY2Vib29rLXByb3ZpZGVyLWNvbmZpZyc7XG5pbXBvcnQgeyBHb29nbGVQcm92aWRlckNvbmZpZyB9IGZyb20gJy4uL21vZGVscy9jb25maWcvZ29vZ2xlLXByb3ZpZGVyLWNvbmZpZyc7XG5pbXBvcnQgeyBHb29nbGVQcm92aWRlciB9IGZyb20gJy4uL3Byb3ZpZGVycy9nb29nbGUtcHJvdmlkZXInO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICcuLi9tb2RlbHMvcHJvdmlkZXInO1xuaW1wb3J0IHsgU29jaWFsVXNlciB9IGZyb20gJy4uL21vZGVscy9zb2NpYWwtdXNlcic7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTb2NpYWxMb2dpblNlcnZpY2Uge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX3Byb3ZpZGVyczogeyBbcHJvdmlkZXJJZDogc3RyaW5nXTogT2F1dGhQcm92aWRlciB9ID0ge307XG5cbiAgICBwcml2YXRlIF9wcm92aWRlckluVXNlOiBQcm92aWRlcjtcblxuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoQ09ORklHKSBjb25maWc6IFByb3ZpZGVyQ29uZmlnKSB7XG4gICAgICAgIHRoaXMuX3Byb3ZpZGVycyA9IE9iamVjdC5rZXlzKGNvbmZpZykucmVkdWNlKChvYmosIHByb3ZpZGVySWQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHByb3ZpZGVyID0gUHJvdmlkZXJbcHJvdmlkZXJJZC50b1VwcGVyQ2FzZSgpXTtcbiAgICAgICAgICAgIG9ialtwcm92aWRlcl0gPSB0aGlzLm9hdXRoUHJvdmlkZXJGYWN0b3J5KHByb3ZpZGVyLCBjb25maWdbcHJvdmlkZXJJZF0pO1xuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfSwge30pO1xuICAgIH1cblxuICAgIGxvZ2luKHByb3ZpZGVyOiBQcm92aWRlcik6IE9ic2VydmFibGU8U29jaWFsVXNlcj4ge1xuICAgICAgICB0aGlzLl9wcm92aWRlckluVXNlID0gcHJvdmlkZXI7XG4gICAgICAgIGNvbnN0IG9hdXRoUHJvdmlkZXIgPSB0aGlzLl9wcm92aWRlcnNbcHJvdmlkZXJdO1xuICAgICAgICByZXR1cm4gb2F1dGhQcm92aWRlciA/IG9hdXRoUHJvdmlkZXIubG9naW4oKSA6IEVNUFRZO1xuICAgIH1cblxuICAgIGxvZ291dCgpOiBPYnNlcnZhYmxlPFNvY2lhbFVzZXI+IHtcbiAgICAgICAgY29uc3Qgb2F1dGhQcm92aWRlciA9IHRoaXMuX3Byb3ZpZGVyc1t0aGlzLl9wcm92aWRlckluVXNlXTtcbiAgICAgICAgY29uc3QgcmV0ID0gb2F1dGhQcm92aWRlciA/IG9hdXRoUHJvdmlkZXIubG9nb3V0KCkgOiBFTVBUWTtcbiAgICAgICAgdGhpcy5fcHJvdmlkZXJJblVzZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICBsb2dnZWRJbigpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb3ZpZGVySW5Vc2UgPyB0cnVlIDogZmFsc2U7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvYXV0aFByb3ZpZGVyRmFjdG9yeShcbiAgICAgICAgcHJvdmlkZXI6IFByb3ZpZGVyLFxuICAgICAgICBjb25maWc6IEdvb2dsZVByb3ZpZGVyQ29uZmlnIHwgRmFjZWJvb2tQcm92aWRlckNvbmZpZ1xuICAgICk6IE9hdXRoUHJvdmlkZXIge1xuICAgICAgICBzd2l0Y2ggKHByb3ZpZGVyKSB7XG4gICAgICAgICAgICBjYXNlIFByb3ZpZGVyLkZBQ0VCT09LOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRmFjZWJvb2tQcm92aWRlcihjb25maWcgYXMgRmFjZWJvb2tQcm92aWRlckNvbmZpZyk7XG4gICAgICAgICAgICBjYXNlIFByb3ZpZGVyLkdPT0dMRTpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEdvb2dsZVByb3ZpZGVyKGNvbmZpZyBhcyBHb29nbGVQcm92aWRlckNvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=