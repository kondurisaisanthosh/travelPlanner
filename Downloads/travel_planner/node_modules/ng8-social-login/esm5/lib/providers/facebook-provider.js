/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { OauthProvider } from './oauth-provider';
import { bindCallback, of } from 'rxjs';
import { map, mergeMap } from 'rxjs/operators';
import { Provider } from '../models/provider';
var FacebookProvider = /** @class */ (function (_super) {
    tslib_1.__extends(FacebookProvider, _super);
    function FacebookProvider(_config) {
        var _this = _super.call(this, Provider.FACEBOOK, '//connect.facebook.net/en_US/sdk.js', (/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var initConfig = _this._config.initOptions;
            /** @type {?} */
            var config = initConfig.version ? initConfig : tslib_1.__assign({}, initConfig, { version: 'v2.9' });
            FB.init(config);
        })) || this;
        _this._config = _config;
        return _this;
    }
    /**
     * @return {?}
     */
    FacebookProvider.prototype.login = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return bindCallback((/**
         * @param {?} cb
         * @return {?}
         */
        function (cb) { return FB.login(cb, _this._config.loginOptions); }))().pipe(mergeMap((/**
         * @param {?} loginResponse
         * @return {?}
         */
        function (loginResponse) {
            return bindCallback((/**
             * @param {?} cb
             * @return {?}
             */
            function (cb) { return FB.api('/me?fields=name,email,picture,first_name,last_name', cb); }))().pipe(map((/**
             * @param {?} meResponse
             * @return {?}
             */
            function (meResponse) { return ((/** @type {?} */ ({
                id: meResponse.id,
                name: meResponse.name,
                email: meResponse.email,
                profileImg: "https://graph.facebook.com/" + meResponse.id + "/picture?type=normal",
                firstName: meResponse.first_name,
                lastName: meResponse.last_name,
                idToken: loginResponse.authResponse.signedRequest,
                accessToken: loginResponse.authResponse.accessToken
            }))); })));
        })));
    };
    /**
     * @return {?}
     */
    FacebookProvider.prototype.logout = /**
     * @return {?}
     */
    function () {
        FB.logout();
        return of(true);
    };
    return FacebookProvider;
}(OauthProvider));
export { FacebookProvider };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FacebookProvider.prototype._config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjZWJvb2stcHJvdmlkZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZzgtc29jaWFsLWxvZ2luLyIsInNvdXJjZXMiOlsibGliL3Byb3ZpZGVycy9mYWNlYm9vay1wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsWUFBWSxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNwRCxPQUFPLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRy9DLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUk5QztJQUFzQyw0Q0FBYTtJQUMvQywwQkFBb0IsT0FBK0I7UUFBbkQsWUFDSSxrQkFBTSxRQUFRLENBQUMsUUFBUSxFQUFFLHFDQUFxQzs7O1FBQUU7O2dCQUN0RCxVQUFVLEdBQUcsS0FBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXOztnQkFDckMsTUFBTSxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLHNCQUFNLFVBQVUsRUFBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsQ0FBRTtZQUMxRixFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3BCLENBQUMsRUFBQyxTQUNMO1FBTm1CLGFBQU8sR0FBUCxPQUFPLENBQXdCOztJQU1uRCxDQUFDOzs7O0lBRUQsZ0NBQUs7OztJQUFMO1FBQUEsaUJBZ0JDO1FBZkcsT0FBTyxZQUFZOzs7O1FBQUMsVUFBQyxFQUFFLElBQUssT0FBQSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxLQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUF2QyxDQUF1QyxFQUFDLEVBQUUsQ0FBQyxJQUFJLENBQ3ZFLFFBQVE7Ozs7UUFBQyxVQUFDLGFBQWtCO1lBQ3hCLE9BQUEsWUFBWTs7OztZQUFDLFVBQUMsRUFBRSxJQUFLLE9BQUEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxvREFBb0QsRUFBRSxFQUFFLENBQUMsRUFBaEUsQ0FBZ0UsRUFBQyxFQUFFLENBQUMsSUFBSSxDQUN6RixHQUFHOzs7O1lBQUMsVUFBQyxVQUFlLElBQUssT0FBQSxDQUFDLG1CQUFBO2dCQUNsQixFQUFFLEVBQUUsVUFBVSxDQUFDLEVBQUU7Z0JBQ2pCLElBQUksRUFBRSxVQUFVLENBQUMsSUFBSTtnQkFDckIsS0FBSyxFQUFFLFVBQVUsQ0FBQyxLQUFLO2dCQUN2QixVQUFVLEVBQUUsZ0NBQThCLFVBQVUsQ0FBQyxFQUFFLHlCQUFzQjtnQkFDN0UsU0FBUyxFQUFFLFVBQVUsQ0FBQyxVQUFVO2dCQUNoQyxRQUFRLEVBQUUsVUFBVSxDQUFDLFNBQVM7Z0JBQzlCLE9BQU8sRUFBRSxhQUFhLENBQUMsWUFBWSxDQUFDLGFBQWE7Z0JBQ2pELFdBQVcsRUFBRSxhQUFhLENBQUMsWUFBWSxDQUFDLFdBQVc7YUFDdEQsRUFBYyxDQUFDLEVBVEssQ0FTTCxFQUNuQixDQUFDO1FBWE4sQ0FXTSxFQUNULENBQUMsQ0FBQztJQUNYLENBQUM7Ozs7SUFFRCxpQ0FBTTs7O0lBQU47UUFDSSxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDWixPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwQixDQUFDO0lBQ0wsdUJBQUM7QUFBRCxDQUFDLEFBL0JELENBQXNDLGFBQWEsR0ErQmxEOzs7Ozs7O0lBOUJlLG1DQUF1QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9hdXRoUHJvdmlkZXIgfSBmcm9tICcuL29hdXRoLXByb3ZpZGVyJztcbmltcG9ydCB7IGJpbmRDYWxsYmFjaywgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCwgbWVyZ2VNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBGYWNlYm9va1Byb3ZpZGVyQ29uZmlnIH0gZnJvbSAnLi4vbW9kZWxzL2NvbmZpZy9mYWNlYm9vay1wcm92aWRlci1jb25maWcnO1xuaW1wb3J0IHsgU29jaWFsVXNlciB9IGZyb20gJy4uL21vZGVscy9zb2NpYWwtdXNlcic7XG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJy4uL21vZGVscy9wcm92aWRlcic7XG5cbmRlY2xhcmUgY29uc3QgRkI6IGFueTtcblxuZXhwb3J0IGNsYXNzIEZhY2Vib29rUHJvdmlkZXIgZXh0ZW5kcyBPYXV0aFByb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9jb25maWc6IEZhY2Vib29rUHJvdmlkZXJDb25maWcpIHtcbiAgICAgICAgc3VwZXIoUHJvdmlkZXIuRkFDRUJPT0ssICcvL2Nvbm5lY3QuZmFjZWJvb2submV0L2VuX1VTL3Nkay5qcycsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGluaXRDb25maWcgPSB0aGlzLl9jb25maWcuaW5pdE9wdGlvbnM7XG4gICAgICAgICAgICBjb25zdCBjb25maWcgPSBpbml0Q29uZmlnLnZlcnNpb24gPyBpbml0Q29uZmlnIDogeyAuLi5pbml0Q29uZmlnLCAuLi57IHZlcnNpb246ICd2Mi45JyB9IH07XG4gICAgICAgICAgICBGQi5pbml0KGNvbmZpZyk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGxvZ2luKCk6IE9ic2VydmFibGU8U29jaWFsVXNlcj4ge1xuICAgICAgICByZXR1cm4gYmluZENhbGxiYWNrKChjYikgPT4gRkIubG9naW4oY2IsIHRoaXMuX2NvbmZpZy5sb2dpbk9wdGlvbnMpKSgpLnBpcGUoXG4gICAgICAgICAgICBtZXJnZU1hcCgobG9naW5SZXNwb25zZTogYW55KSA9PlxuICAgICAgICAgICAgICAgIGJpbmRDYWxsYmFjaygoY2IpID0+IEZCLmFwaSgnL21lP2ZpZWxkcz1uYW1lLGVtYWlsLHBpY3R1cmUsZmlyc3RfbmFtZSxsYXN0X25hbWUnLCBjYikpKCkucGlwZShcbiAgICAgICAgICAgICAgICAgICAgbWFwKChtZVJlc3BvbnNlOiBhbnkpID0+ICh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IG1lUmVzcG9uc2UuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogbWVSZXNwb25zZS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsOiBtZVJlc3BvbnNlLmVtYWlsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2ZpbGVJbWc6IGBodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS8ke21lUmVzcG9uc2UuaWR9L3BpY3R1cmU/dHlwZT1ub3JtYWxgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0TmFtZTogbWVSZXNwb25zZS5maXJzdF9uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3ROYW1lOiBtZVJlc3BvbnNlLmxhc3RfbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZFRva2VuOiBsb2dpblJlc3BvbnNlLmF1dGhSZXNwb25zZS5zaWduZWRSZXF1ZXN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc1Rva2VuOiBsb2dpblJlc3BvbnNlLmF1dGhSZXNwb25zZS5hY2Nlc3NUb2tlblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBhcyBTb2NpYWxVc2VyKVxuICAgICAgICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgKSk7XG4gICAgfVxuXG4gICAgbG9nb3V0KCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIEZCLmxvZ291dCgpO1xuICAgICAgICByZXR1cm4gb2YodHJ1ZSk7XG4gICAgfVxufVxuIl19