/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Observable, from } from 'rxjs';
import { OauthProvider } from './oauth-provider';
import { map } from 'rxjs/operators';
import { Provider } from '../models/provider';
var GoogleProvider = /** @class */ (function (_super) {
    tslib_1.__extends(GoogleProvider, _super);
    function GoogleProvider(config) {
        var _this = _super.call(this, Provider.GOOGLE, '//apis.google.com/js/platform.js', (/**
         * @return {?}
         */
        function () {
            gapi.load('auth2', (/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var conf = !config.scope ? tslib_1.__assign({}, config, { scope: 'email' }) : config;
                gapi.auth2.init(conf).then((/**
                 * @param {?} auth
                 * @return {?}
                 */
                function (auth) { return (_this._googleAuth = auth); }));
            }));
        })) || this;
        return _this;
    }
    /**
     * @return {?}
     */
    GoogleProvider.prototype.login = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return from(this._googleAuth.signIn({ prompt: 'select_account' })).pipe(map((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var profile = _this._googleAuth.currentUser.get().getBasicProfile();
            /** @type {?} */
            var accessToken = _this._googleAuth.currentUser.get().getAuthResponse(true).access_token;
            /** @type {?} */
            var idToken = _this._googleAuth.currentUser.get().getAuthResponse(true).id_token;
            return {
                id: profile.getId(),
                email: profile.getEmail(),
                name: profile.getName(),
                profileImg: profile.getImageUrl(),
                accessToken: accessToken,
                idToken: idToken
            };
        })));
    };
    /**
     * @return {?}
     */
    GoogleProvider.prototype.logout = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return Observable.create((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) { return observer.complete(_this._googleAuth.signOut()); }));
    };
    return GoogleProvider;
}(OauthProvider));
export { GoogleProvider };
if (false) {
    /**
     * @type {?}
     * @private
     */
    GoogleProvider.prototype._googleAuth;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmc4LXNvY2lhbC1sb2dpbi8iLCJzb3VyY2VzIjpbImxpYi9wcm92aWRlcnMvZ29vZ2xlLXByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDeEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFLOUM7SUFBb0MsMENBQWE7SUFHN0Msd0JBQVksTUFBNEI7UUFBeEMsWUFDSSxrQkFBTSxRQUFRLENBQUMsTUFBTSxFQUFFLGtDQUFrQzs7O1FBQUU7WUFDdkQsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPOzs7WUFBRTs7b0JBQ1QsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLHNCQUFNLE1BQU0sRUFBSyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBRyxDQUFDLENBQUMsTUFBTTtnQkFDMUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSTs7OztnQkFBQyxVQUFBLElBQUksSUFBSSxPQUFBLENBQUMsS0FBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsRUFBekIsQ0FBeUIsRUFBQyxDQUFDO1lBQ2xFLENBQUMsRUFBQyxDQUFDO1FBQ1AsQ0FBQyxFQUFDLFNBQ0w7O0lBQUQsQ0FBQzs7OztJQUVELDhCQUFLOzs7SUFBTDtRQUFBLGlCQWlCQztRQWhCRyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFLE1BQU0sRUFBRSxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ25FLEdBQUc7OztRQUFDOztnQkFDTSxPQUFPLEdBQUcsS0FBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUMsZUFBZSxFQUFFOztnQkFDOUQsV0FBVyxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxZQUFZOztnQkFDbkYsT0FBTyxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRO1lBRWpGLE9BQU87Z0JBQ0gsRUFBRSxFQUFFLE9BQU8sQ0FBQyxLQUFLLEVBQUU7Z0JBQ25CLEtBQUssRUFBRSxPQUFPLENBQUMsUUFBUSxFQUFFO2dCQUN6QixJQUFJLEVBQUUsT0FBTyxDQUFDLE9BQU8sRUFBRTtnQkFDdkIsVUFBVSxFQUFFLE9BQU8sQ0FBQyxXQUFXLEVBQUU7Z0JBQ2pDLFdBQVcsRUFBRSxXQUFXO2dCQUN4QixPQUFPLEVBQUUsT0FBTzthQUNuQixDQUFDO1FBQ04sQ0FBQyxFQUFDLENBQ0wsQ0FBQztJQUNOLENBQUM7Ozs7SUFFRCwrQkFBTTs7O0lBQU47UUFBQSxpQkFFQztRQURHLE9BQU8sVUFBVSxDQUFDLE1BQU07Ozs7UUFBQyxVQUFBLFFBQVEsSUFBSSxPQUFBLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUE3QyxDQUE2QyxFQUFDLENBQUM7SUFDeEYsQ0FBQztJQUNMLHFCQUFDO0FBQUQsQ0FBQyxBQWxDRCxDQUFvQyxhQUFhLEdBa0NoRDs7Ozs7OztJQWpDRyxxQ0FBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBmcm9tIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBPYXV0aFByb3ZpZGVyIH0gZnJvbSAnLi9vYXV0aC1wcm92aWRlcic7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBHb29nbGVQcm92aWRlckNvbmZpZyB9IGZyb20gJy4uL21vZGVscy9jb25maWcvZ29vZ2xlLXByb3ZpZGVyLWNvbmZpZyc7XG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJy4uL21vZGVscy9wcm92aWRlcic7XG5pbXBvcnQgeyBTb2NpYWxVc2VyIH0gZnJvbSAnLi4vbW9kZWxzL3NvY2lhbC11c2VyJztcblxuZGVjbGFyZSBjb25zdCBnYXBpOiBhbnk7XG5cbmV4cG9ydCBjbGFzcyBHb29nbGVQcm92aWRlciBleHRlbmRzIE9hdXRoUHJvdmlkZXIge1xuICAgIHByaXZhdGUgX2dvb2dsZUF1dGg6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZzogR29vZ2xlUHJvdmlkZXJDb25maWcpIHtcbiAgICAgICAgc3VwZXIoUHJvdmlkZXIuR09PR0xFLCAnLy9hcGlzLmdvb2dsZS5jb20vanMvcGxhdGZvcm0uanMnLCAoKSA9PiB7XG4gICAgICAgICAgICBnYXBpLmxvYWQoJ2F1dGgyJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbmYgPSAhY29uZmlnLnNjb3BlID8geyAuLi5jb25maWcsIC4uLnsgc2NvcGU6ICdlbWFpbCcgfSB9IDogY29uZmlnO1xuICAgICAgICAgICAgICAgIGdhcGkuYXV0aDIuaW5pdChjb25mKS50aGVuKGF1dGggPT4gKHRoaXMuX2dvb2dsZUF1dGggPSBhdXRoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbG9naW4oKTogT2JzZXJ2YWJsZTxTb2NpYWxVc2VyPiB7XG4gICAgICAgIHJldHVybiBmcm9tKHRoaXMuX2dvb2dsZUF1dGguc2lnbkluKHsgcHJvbXB0OiAnc2VsZWN0X2FjY291bnQnIH0pKS5waXBlKFxuICAgICAgICAgICAgbWFwKCgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9maWxlID0gdGhpcy5fZ29vZ2xlQXV0aC5jdXJyZW50VXNlci5nZXQoKS5nZXRCYXNpY1Byb2ZpbGUoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBhY2Nlc3NUb2tlbiA9IHRoaXMuX2dvb2dsZUF1dGguY3VycmVudFVzZXIuZ2V0KCkuZ2V0QXV0aFJlc3BvbnNlKHRydWUpLmFjY2Vzc190b2tlbjtcbiAgICAgICAgICAgICAgICBjb25zdCBpZFRva2VuID0gdGhpcy5fZ29vZ2xlQXV0aC5jdXJyZW50VXNlci5nZXQoKS5nZXRBdXRoUmVzcG9uc2UodHJ1ZSkuaWRfdG9rZW47XG5cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBpZDogcHJvZmlsZS5nZXRJZCgpLFxuICAgICAgICAgICAgICAgICAgICBlbWFpbDogcHJvZmlsZS5nZXRFbWFpbCgpLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBwcm9maWxlLmdldE5hbWUoKSxcbiAgICAgICAgICAgICAgICAgICAgcHJvZmlsZUltZzogcHJvZmlsZS5nZXRJbWFnZVVybCgpLFxuICAgICAgICAgICAgICAgICAgICBhY2Nlc3NUb2tlbjogYWNjZXNzVG9rZW4sXG4gICAgICAgICAgICAgICAgICAgIGlkVG9rZW46IGlkVG9rZW5cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBsb2dvdXQoKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIE9ic2VydmFibGUuY3JlYXRlKG9ic2VydmVyID0+IG9ic2VydmVyLmNvbXBsZXRlKHRoaXMuX2dvb2dsZUF1dGguc2lnbk91dCgpKSk7XG4gICAgfVxufVxuIl19